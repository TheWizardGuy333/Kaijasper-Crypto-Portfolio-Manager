import os

import sys

import pandas as pd

import requests

import sqlite3

import streamlit as st

from datetime import datetime

from dotenv import load_dotenv

from cachetools import TTLCache

import logging

import plotly.express as px



# Try importing plotly and handle missing module

try:

Â  Â  import plotly.express as px

except ModuleNotFoundError:

Â  Â  st.error("The `plotly` library is not installed. Please install it by running `pip install plotly`.")

Â  Â  sys.exit("Error: Missing required library `plotly`")



# Setup logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

logger = logging.getLogger(__name__)



# Load environment variables

load_dotenv()



CRYPTOCOMPARE_API_KEY = os.getenv("CRYPTOCOMPARE_API_KEY")

LIVECOINWATCH_API_KEY = os.getenv("LIVECOINWATCH_API_KEY")



# Notify if API keys are missing

if not CRYPTOCOMPARE_API_KEY or not LIVECOINWATCH_API_KEY:

Â  Â  st.warning("Some API keys are missing. Certain functionalities may not work.")

Â  Â  logger.warning("Missing API keys: CryptoCompare or LiveCoinWatch.")



# Token List (Ensure compatibility with all APIs)

TOKENS = {

Â  Â  "BONK": "bonk",

Â  Â  "Dogecoin": "dogecoin",

Â  Â  "Shiba Inu": "shiba-inu",

Â  Â  "Baby Doge": "baby-doge-coin",

Â  Â  "Kishu Inu": "kishu-inu",

Â  Â  "Saitama": "saitama",

Â  Â  "SafeMoon": "safemoon",

Â  Â  "Akita Inu": "akita-inu",

Â  Â  "Volt Inu": "volt-inu",

Â  Â  "CateCoin": "catecoin",

Â  Â  "Shiba Predator": "shiba-predator",

Â  Â  "DogeBonk": "dogebonk",

Â  Â  "Flokinomics": "flokinomics",

Â  Â  "StarLink": "starlink",

Â  Â  "DogeGF": "dogegf",

Â  Â  "Shibaverse": "shibaverse",

Â  Â  "FEG Token": "feg-token",

Â  Â  "Dogelon Mars": "dogelon-mars",

Â  Â  "BabyFloki": "babyfloki",

Â  Â  "PolyDoge": "polydoge",

Â  Â  "Moonriver": "moonriver",

Â  Â  "MetaHero": "metahero",

Â  Â  "BabyDogeZilla": "babydogezilla",

Â  Â  "BabyShark": "babyshark",

Â  Â  "Wakanda Inu": "wakanda-inu",

Â  Â  "King Shiba": "king-shiba",

Â  Â  "PepeCoin": "pepecoin",

Â  Â  "Pitbull": "pitbull",

Â  Â  "MiniDoge": "minidoge",

Â  Â  "Bonfida": "bonfida",

}



# Initialize SQLite database

@st.cache_resource

def init_db():

Â  Â  try:

Â  Â  Â  Â  db_path = os.path.join(os.getcwd(), "portfolio.db")

Â  Â  Â  Â  conn = sqlite3.connect(db_path, check_same_thread=False)

Â  Â  Â  Â  c = conn.cursor()

Â  Â  Â  Â  c.execute("""

Â  Â  Â  Â  Â  Â  CREATE TABLE IF NOT EXISTS portfolio (

Â  Â  Â  Â  Â  Â  Â  Â  token TEXT PRIMARY KEY,

Â  Â  Â  Â  Â  Â  Â  Â  quantity REAL,

Â  Â  Â  Â  Â  Â  Â  Â  value REAL

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  """)

Â  Â  Â  Â  c.execute("""

Â  Â  Â  Â  Â  Â  CREATE TABLE IF NOT EXISTS transactions (

Â  Â  Â  Â  Â  Â  Â  Â  id INTEGER PRIMARY KEY AUTOINCREMENT,

Â  Â  Â  Â  Â  Â  Â  Â  token TEXT,

Â  Â  Â  Â  Â  Â  Â  Â  date TEXT,

Â  Â  Â  Â  Â  Â  Â  Â  type TEXT,

Â  Â  Â  Â  Â  Â  Â  Â  quantity REAL,

Â  Â  Â  Â  Â  Â  Â  Â  price REAL,

Â  Â  Â  Â  Â  Â  Â  Â  total_value REAL

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  """)

Â  Â  Â  Â  c.execute("""

Â  Â  Â  Â  Â  Â  CREATE TABLE IF NOT EXISTS watchlist (

Â  Â  Â  Â  Â  Â  Â  Â  token TEXT PRIMARY KEY

Â  Â  Â  Â  Â  Â  )

Â  Â  Â  Â  """)

Â  Â  Â  Â  conn.commit()

Â  Â  Â  Â  return conn, c

Â  Â  except sqlite3.Error as e:

Â  Â  Â  Â  st.error(f"Database Initialization Error: {e}")

Â  Â  Â  Â  logger.error(f"Database Initialization Error: {e}")

Â  Â  Â  Â  return None, None



# Add the "Visit Coinbase" button

def add_coinbase_button():

Â  Â  st.button("Visit Coinbase", on_click=lambda: st.sidebar.markdown(f"[Visit Coinbase](https://www.coinbase.com/explore/s/listed)", unsafe_allow_html=True))



# Caching for API responses

cache = TTLCache(maxsize=100, ttl=300)Â  # Cache up to 100 items for 5 minutes



# Fetch price with fallback mechanisms and detailed logging

def fetch_price(token_id):

Â  Â  try:

Â  Â  Â  Â  if token_id in cache:

Â  Â  Â  Â  Â  Â  logger.info(f"Cache hit for token: {token_id}")

Â  Â  Â  Â  Â  Â  return cache[token_id]

Â  Â  Â  Â Â 

Â  Â  Â  Â  logger.info(f"Fetching price for token: {token_id}")

Â  Â  Â  Â Â 

Â  Â  Â  Â  # Attempt to fetch price from multiple sources and log which source failed

Â  Â  Â  Â  price = None

Â  Â  Â  Â Â 

Â  Â  Â  Â  # Try Coingecko

Â  Â  Â  Â  price = fetch_price_coingecko(token_id)

Â  Â  Â  Â  if not price:

Â  Â  Â  Â  Â  Â  logger.warning(f"Failed to fetch price for {token_id} from Coingecko.")

Â  Â  Â  Â Â 

Â  Â  Â  Â  # Try CryptoCompare if Coingecko fails

Â  Â  Â  Â  if not price:

Â  Â  Â  Â  Â  Â  price = fetch_price_cryptocompare(token_id)

Â  Â  Â  Â  Â  Â  if not price:

Â  Â  Â  Â  Â  Â  Â  Â  logger.warning(f"Failed to fetch price for {token_id} from CryptoCompare.")

Â  Â  Â  Â Â 

Â  Â  Â  Â  # Try LiveCoinWatch if both previous APIs fail

Â  Â  Â  Â  if not price:

Â  Â  Â  Â  Â  Â  price = fetch_price_livecoinwatch(token_id)

Â  Â  Â  Â  Â  Â  if not price:

Â  Â  Â  Â  Â  Â  Â  Â  logger.warning(f"Failed to fetch price for {token_id} from LiveCoinWatch.")

Â  Â  Â  Â Â 

Â  Â  Â  Â  if price:

Â  Â  Â  Â  Â  Â  cache[token_id] = price

Â  Â  Â  Â  Â  Â  logger.info(f"Price fetched successfully for {token_id}: {price}")

Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  logger.warning(f"Price not found for token: {token_id}")

Â  Â  Â  Â  return price

Â  Â  except Exception as e:

Â  Â  Â  Â  logger.error(f"Error fetching price for {token_id}: {e}")

Â  Â  Â  Â  return None



# Fetch price from Coingecko

def fetch_price_coingecko(token_id):

Â  Â  try:

Â  Â  Â  Â  url = f"https://api.coingecko.com/api/v3/simple/price?ids={token_id}&vs_currencies=usd"

Â  Â  Â  Â  response = requests.get(url)

Â  Â  Â  Â  response.raise_for_status()

Â  Â  Â  Â  price = response.json().get(token_id, {}).get("usd")

Â  Â  Â  Â  logger.info(f"Coingecko price for {token_id}: {price}")

Â  Â  Â  Â  return {"price": price} if price else None

Â  Â  except requests.RequestException as e:

Â  Â  Â  Â  logger.error(f"Coingecko API Error for {token_id}: {e}")

Â  Â  Â  Â  return None



# Fetch price from CryptoCompare

def fetch_price_cryptocompare(token_id):

Â  Â  try:

Â  Â  Â  Â  url = f"https://min-api.cryptocompare.com/data/price?fsym={token_id.upper()}&tsyms=USD"

Â  Â  Â  Â  headers = {"authorization": f"Apikey {CRYPTOCOMPARE_API_KEY}"}

Â  Â  Â  Â  response = requests.get(url, headers=headers)

Â  Â  Â  Â  response.raise_for_status()

Â  Â  Â  Â  price = response.json().get("USD")

Â  Â  Â  Â  logger.info(f"CryptoCompare price for {token_id}: {price}")

Â  Â  Â  Â  return {"price": price} if price else None

Â  Â  except requests.RequestException as e:

Â  Â  Â  Â  logger.error(f"CryptoCompare API Error for {token_id}: {e}")

Â  Â  Â  Â  return None



# Fetch price from LiveCoinWatch

def fetch_price_livecoinwatch(token_id):

Â  Â  try:

Â  Â  Â  Â  url = "https://api.livecoinwatch.com/coins/single"

Â  Â  Â  Â  headers = {"x-api-key": LIVECOINWATCH_API_KEY}

Â  Â  Â  Â  payload = {"code": token_id.upper(), "currency": "USD", "meta": True}

Â  Â  Â  Â  response = requests.post(url, json=payload, headers=headers)

Â  Â  Â  Â  response.raise_for_status()

Â  Â  Â  Â  price = response.json().get("rate")

Â  Â  Â  Â  logger.info(f"LiveCoinWatch price for {token_id}: {price}")

Â  Â  Â  Â  return {"price": price} if price else None

Â  Â  except requests.RequestException as e:

Â  Â  Â  Â  logger.error(f"LiveCoinWatch API Error for {token_id}: {e}")

Â  Â  Â  Â  return None



# Add token to portfolio

def add_token(c, conn, token, quantity, price):

Â  Â  try:

Â  Â  Â  Â  c.execute("SELECT quantity FROM portfolio WHERE token = ?", (token,))

Â  Â  Â  Â  existing = c.fetchone()

Â  Â  Â  Â  if existing:

Â  Â  Â  Â  Â  Â  new_quantity = existing[0] + quantity

Â  Â  Â  Â  Â  Â  new_value = new_quantity * price

Â  Â  Â  Â  Â  Â  c.execute("UPDATE portfolio SET quantity = ?, value = ? WHERE token = ?", (new_quantity, new_value, token))

Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  total_value = quantity * price

Â  Â  Â  Â  Â  Â  c.execute("INSERT INTO portfolio (token, quantity, value) VALUES (?, ?, ?)", (token, quantity, total_value))

Â  Â  Â  Â  c.execute("""

Â  Â  Â  Â  Â  Â  INSERT INTO transactions (token, date, type, quantity, price, total_value)

Â  Â  Â  Â  Â  Â  VALUES (?, ?, ?, ?, ?, ?)

Â  Â  Â  Â  """, (token, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "Buy", quantity, price, total_value))

Â  Â  Â  Â  conn.commit()

Â  Â  Â  Â  st.success(f"Added {quantity} of {token} to portfolio at ${price:.6f} each.")

Â  Â  except sqlite3.Error as e:

Â  Â  Â  Â  st.error(f"Database Error: {e}")

Â  Â  Â  Â  logger.error(f"Database Error: {e}")



# Delete token from portfolio

def delete_token(c, conn, token):

Â  Â  try:

Â  Â  Â  Â  c.execute("DELETE FROM portfolio WHERE token = ?", (token,))

Â  Â  Â  Â  conn.commit()

Â  Â  Â  Â  st.success(f"{token} has been removed from your portfolio.")

Â  Â  except sqlite3.Error as e:

Â  Â  Â  Â  st.error(f"Database Error: {e}")

Â  Â  Â  Â  logger.error(f"Database Error: {e}")



# Display portfolio data

def display_portfolio():

Â  Â  conn, c = init_db()

Â  Â  c.execute("SELECT token, quantity, value FROM portfolio")

Â  Â  rows = c.fetchall()

Â  Â  if rows:

Â  Â  Â  Â  df = pd.DataFrame(rows, columns=["Token", "Quantity", "Value"])

Â  Â  Â  Â  st.dataframe(df)

Â  Â  else:

Â  Â  Â  Â  st.write("Your portfolio is empty.")



# Your Streamlit app code continues below...

st.title("ðŸš€ Kaijasper Crypto Portfolio Manager ðŸš€")



# Add the Coinbase button at the top (Standalone)

add_coinbase_button()



# Portfolio Management Section

st.subheader("Portfolio Management")

display_portfolio()



# Add the Coinbase button in a section (Learn More)

st.subheader("Learn More")

st.write("For additional information on buying and selling cryptocurrency, you can visit:")

add_coinbase_button()



# Continue with the rest of your app...

# Function to add a new token to the portfolio (via Streamlit form)

def add_token_form():

Â  Â  conn, c = init_db()

Â  Â Â 

Â  Â  with st.form(key='add_token_form'):

Â  Â  Â  Â  st.subheader("Add Token to Portfolio")

Â  Â  Â  Â Â 

Â  Â  Â  Â  token = st.selectbox("Choose Token", list(TOKENS.keys()))

Â  Â  Â  Â  quantity = st.number_input(f"Quantity of {token}:", min_value=0.01, step=0.01)

Â  Â  Â  Â  price = fetch_price(TOKENS[token])Â  # Get the price from the selected API

Â  Â  Â  Â Â 

Â  Â  Â  Â  if price:

Â  Â  Â  Â  Â  Â  st.write(f"Current Price: ${price['price']:.6f}")

Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  st.warning(f"Could not fetch price for {token}.")

Â  Â  Â  Â  Â  Â  return

Â  Â  Â  Â Â 

Â  Â  Â  Â  submit_button = st.form_submit_button(label="Add to Portfolio")

Â  Â  Â  Â Â 

Â  Â  Â  Â  if submit_button:

Â  Â  Â  Â  Â  Â  if quantity > 0:

Â  Â  Â  Â  Â  Â  Â  Â  add_token(c, conn, token, quantity, price['price'])

Â  Â  Â  Â  Â  Â  else:

Â  Â  Â  Â  Â  Â  Â  Â  st.warning("Quantity must be greater than 0.")



# Function to remove a token from the portfolio (via Streamlit button)

def remove_token_button():

Â  Â  conn, c = init_db()

Â  Â Â 

Â  Â  st.subheader("Remove Token from Portfolio")

Â  Â  c.execute("SELECT token FROM portfolio")

Â  Â  tokens_in_portfolio = [row[0] for row in c.fetchall()]

Â  Â Â 

Â  Â  if tokens_in_portfolio:

Â  Â  Â  Â  token_to_remove = st.selectbox("Choose Token to Remove", tokens_in_portfolio)

Â  Â  Â  Â  if st.button("Remove Token"):

Â  Â  Â  Â  Â  Â  delete_token(c, conn, token_to_remove)

Â  Â  else:

Â  Â  Â  Â  st.write("Your portfolio is empty. Nothing to remove.")



# Function to visualize the portfolio's token values

def visualize_portfolio():

Â  Â  conn, c = init_db()

Â  Â Â 

Â  Â  st.subheader("Portfolio Visualization")

Â  Â  c.execute("SELECT token, value FROM portfolio")

Â  Â  rows = c.fetchall()

Â  Â Â 

Â  Â  if rows:

Â  Â  Â  Â  df = pd.DataFrame(rows, columns=["Token", "Value"])

Â  Â  Â  Â  fig = px.pie(df, names='Token', values='Value', title="Portfolio Token Distribution")

Â  Â  Â  Â  st.plotly_chart(fig)

Â  Â  else:

Â  Â  Â  Â  st.write("Your portfolio is empty.")



# Display Portfolio Overview

def portfolio_overview():

Â  Â  conn, c = init_db()

Â  Â  c.execute("SELECT token, quantity, value FROM portfolio")

Â  Â  rows = c.fetchall()

Â  Â Â 

Â  Â  if rows:

Â  Â  Â  Â  st.subheader("Current Portfolio Overview")

Â  Â  Â  Â  df = pd.DataFrame(rows, columns=["Token", "Quantity", "Value"])

Â  Â  Â  Â  st.dataframe(df)

Â  Â  else:

Â  Â  Â  Â  st.write("Your portfolio is empty. Add tokens to start building it!")



# Function to view and manage the watchlist

def manage_watchlist():

Â  Â  conn, c = init_db()

Â  Â Â 

Â  Â  st.subheader("Manage Watchlist")

Â  Â Â 

Â  Â  # Display current watchlist

Â  Â  c.execute("SELECT token FROM watchlist")

Â  Â  watchlist_tokens = [row[0] for row in c.fetchall()]

Â  Â Â 

Â  Â  st.write("Watchlist Tokens:")

Â  Â  if watchlist_tokens:

Â  Â  Â  Â  st.write(watchlist_tokens)

Â  Â  else:

Â  Â  Â  Â  st.write("Your watchlist is empty.")

Â  Â Â 

Â  Â  # Add token to watchlist

Â  Â  token_to_add = st.selectbox("Add Token to Watchlist", list(TOKENS.keys()))

Â  Â  if st.button("Add to Watchlist"):

Â  Â  Â  Â  try:

Â  Â  Â  Â  Â  Â  c.execute("INSERT INTO watchlist (token) VALUES (?)", (token_to_add,))

Â  Â  Â  Â  Â  Â  conn.commit()

Â  Â  Â  Â  Â  Â  st.success(f"{token_to_add} has been added to your watchlist.")

Â  Â  Â  Â  except sqlite3.Error as e:

Â  Â  Â  Â  Â  Â  st.error(f"Error adding token to watchlist: {e}")

Â  Â Â 

Â  Â  # Remove token from watchlist

Â  Â  if watchlist_tokens:

Â  Â  Â  Â  token_to_remove = st.selectbox("Remove Token from Watchlist", watchlist_tokens)

Â  Â  Â  Â  if st.button("Remove from Watchlist"):

Â  Â  Â  Â  Â  Â  try:

Â  Â  Â  Â  Â  Â  Â  Â  c.execute("DELETE FROM watchlist WHERE token = ?", (token_to_remove,))

Â  Â  Â  Â  Â  Â  Â  Â  conn.commit()

Â  Â  Â  Â  Â  Â  Â  Â  st.success(f"{token_to_remove} has been removed from your watchlist.")

Â  Â  Â  Â  Â  Â  except sqlite3.Error as e:

Â  Â  Â  Â  Â  Â  Â  Â  st.error(f"Error removing token from watchlist: {e}")



# Displaying recent transactions

def display_transactions():

Â  Â  conn, c = init_db()

Â  Â Â 

Â  Â  st.subheader("Transaction History")

Â  Â  c.execute("SELECT * FROM transactions ORDER BY date DESC LIMIT 10")

Â  Â  transactions = c.fetchall()

Â  Â Â 

Â  Â  if transactions:

Â  Â  Â  Â  df = pd.DataFrame(transactions, columns=["ID", "Token", "Date", "Type", "Quantity", "Price", "Total Value"])

Â  Â  Â  Â  st.dataframe(df)

Â  Â  else:

Â  Â  Â  Â  st.write("No transactions found.")



# Main function to run the Streamlit app

def main():

Â  Â  # Streamlit sidebar navigation

Â  Â  st.sidebar.title("Navigation")

Â  Â  option = st.sidebar.radio("Choose an option",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ["Portfolio Overview",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "Add Token",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "Remove Token",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "Visualize Portfolio",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "Manage Watchlist",Â 

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "Transaction History"])

Â  Â Â 

Â  Â  # Display based on selected option

Â  Â  if option == "Portfolio Overview":

Â  Â  Â  Â  portfolio_overview()

Â  Â  elif option == "Add Token":

Â  Â  Â  Â  add_token_form()

Â  Â  elif option == "Remove Token":

Â  Â  Â  Â  remove_token_button()

Â  Â  elif option == "Visualize Portfolio":

Â  Â  Â  Â  visualize_portfolio()

Â  Â  elif option == "Manage Watchlist":

Â  Â  Â  Â  manage_watchlist()

Â  Â  elif option == "Transaction History":

Â  Â  Â  Â  display_transactions()



if __name__ == "__main__":

Â  Â  main()
